#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

// binarysearchtree

struct bst{           //declaration of tree structure
   int data;        
   bst* left;
   bst* right;
};

bst* getnewnode(int data){       //generating new node in tree
    bst* newnode=new bst();
    newnode->data=data;
    newnode->left=newnode->right=NULL;
    return newnode;
}

bst* insert(bst* root,int data){       // inserting values at tree
    if(root==NULL){
        root=getnewnode(data);
    }
    else if(data<=root->data){
        root->left=insert(root->left,data);
    }
    else{
        root->right=insert(root->right,data);
    }
    return root;
}

bool search(bst* root,int data){        // seraching value at tree
    if(root==NULL)return false;
    else if(root->data==data)return true;
    else if(data<=root->data){
        return search(root->left,data);
    }
    else{
        return search(root->right,data);
    }
}
int findmin(bst* root){
    if(root==NULL)return -1;
    bst* curr=root;
    if(root->left==NULL)return root->data;        // recurssive way
    return findmin(root->left);
}

int findmax(bst* root){
    if(root==NULL)return -1;
    bst* curr=root;
    while(curr->right!=NULL){       //iterative way
        curr=curr->right;
    }
    return curr->data;
} 

void levelorder(bst* root){
    if(root==NULL)return;
    queue<bst*>q;
    q.push(root);                    // level order traversal way
    while(!q.empty()){
        bst* curr=q.front();
        cout<<curr->data<<" ";
        if(curr->left!=NULL)q.push(curr->left);
        if(curr->right!=NULL)q.push(curr->right);
        q.pop();
    }
}

int findheight(bst* root){
    if(root==NULL)return -1;
    int left=findheight(root->left);            // height is maximum no. of edges to go from root to leaf node 
    int right=findheight(root->right);
    int ans=max(left,right)+1;
    return ans;
}

void preorder(bst* root){
    if(root==NULL)return;                       // preorder way
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(bst* root){
    if(root==NULL)return;                       // inorder way
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

void postorder(bst* root){
    if(root==NULL)return;                       // postorder way
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
// time for DFS =O(n)
// space for DFS =O(h)-worst   O(logn)-best
int main()
{
    bst* root=NULL;     // creating an empty tree
    root=insert(root,10);
    root=insert(root,20);
    root=insert(root,30);
    root=insert(root,40);
    root=insert(root,5);
    root=insert(root,3);

    //cout<<search(root,40);
    //cout<<findmin(root)<<endl;
    //cout<<findmax(root)<<endl;
    //cout<<findheight(root);
    //levelorder(root);
    //cout<<endl;
   //preorder(root);
 return 0;    
}
